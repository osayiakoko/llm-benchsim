import random
from contextlib import contextmanager
from datetime import datetime, timezone

from src.config import settings
from src.database import get_db
from src.schema import SimulationResultCreate
from src.repository import SimulationRepository
from src.rabbitmq_publisher import RabbitMQPublisher


class SimulationService:
    METRICS = ["TTFT", "TPS", "e2e_latency", "RPS"]

    def __init__(self, repository: SimulationRepository, publisher: RabbitMQPublisher):
        """
        Initializes a SimulationService object.

        Parameters:
            repository (SimulationRepository): The repository to be used by the service.
            publisher (RabbitMQPublisher): The publisher to be used by the service.

        Returns:
            None
        """
        self.repository = repository
        self.publisher = publisher
        self.rng = random.Random(settings.RANDOM_SEED)

    def generate_data_points(self, metric: str) -> list[float]:
        """
        Generates a list of random data points for a given metric.

        Parameters:
            metric (str): The metric for which to generate data points.
                          It can be one of the following: "TTFT", "TPS", "e2e_latency", "RPS".

        Returns:
            list[float]: A list of random float values representing the data points for the given metric.
        """
        if metric == "TTFT":
            return [self.rng.uniform(0.1, 2.0) for _ in range(settings.NUM_DATA_POINTS)]
        elif metric == "TPS":
            return [self.rng.uniform(10, 100) for _ in range(settings.NUM_DATA_POINTS)]
        elif metric == "e2e_latency":
            return [self.rng.uniform(0.5, 5.0) for _ in range(settings.NUM_DATA_POINTS)]
        elif metric == "RPS":
            return [self.rng.uniform(1, 20) for _ in range(settings.NUM_DATA_POINTS)]

    def simulate(self) -> list[SimulationResultCreate]:
        """
        Simulates LLM performance metrics and returns a list of simulation results.

        Parameters:
            None

        Returns:
            list[SimulationResultCreate]: A list of simulation results, each containing the LLM name, metric, values, and timestamp.
        """
        results = []
        timestamp = datetime.now(timezone.utc)

        for llm in settings.LLM_MODELS:
            for metric in self.METRICS:
                values = self.generate_data_points(metric)
                results.append(
                    SimulationResultCreate(
                        llm_name=llm,
                        metric=metric,
                        values=values,
                        timestamp=timestamp,
                    )
                )

        return results

    def run_simulation(self) -> int:
        """
        Runs a simulation, storing and publishing the results.

        Parameters:
            None

        Returns:
            int: The number of results generated by the simulation.
        """
        results = self.simulate()
        self.repository.insert_results(results)
        self.publisher.publish_results(results)
        return len(results)


@contextmanager
def get_simulation_service():
    db = next(get_db())
    publisher = RabbitMQPublisher()
    repository = SimulationRepository(db)
    service = SimulationService(repository, publisher)
    try:
        yield service
    finally:
        publisher.close()
